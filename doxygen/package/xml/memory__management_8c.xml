<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="memory__management_8c" kind="file" language="C++">
    <compoundname>memory_management.c</compoundname>
    <includes refid="memory__management_8h" local="yes">memory_management.h</includes>
    <includes refid="logger_8h" local="yes">../logging/logger.h</includes>
    <incdepgraph>
      <node id="3">
        <label>../logging/logger.h</label>
        <link refid="logger_8h"/>
      </node>
      <node id="1">
        <label>src/memory/memory_management.c</label>
        <link refid="memory__management_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>memory_management.h</label>
        <link refid="memory__management_8h_source"/>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="memory__management_8c_1ac6d6edf6b3dc470f7e809e5f82b21658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>memory_pool_t *</type>
        <definition>memory_pool_t * init_memory_pool</definition>
        <argsstring>(size_t size)</argsstring>
        <name>init_memory_pool</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Initialize a memory pool of the given size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the memory pool to initialize, when the given size is smaller than 1MB, the size will be automatically set to 1MB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pointer to the memory pool. When NULL, the initialization failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/memory/memory_management.c" line="15" column="15" bodyfile="src/memory/memory_management.c" bodystart="15" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="memory__management_8c_1ad9c929376b0501e9ad79f3a293fe8a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * memory_pool_alloc</definition>
        <argsstring>(memory_pool_t *pool, size_t size)</argsstring>
        <name>memory_pool_alloc</name>
        <param>
          <type>memory_pool_t *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates memory on the given memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para>If the remaining memory space is lager enough, creates a new unused block for the remaining memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to allocate memory from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the memory to allocate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pointer to the reserved memory space, or NULL if there is no free space on the pool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/memory/memory_management.c" line="51" column="6" bodyfile="src/memory/memory_management.c" bodystart="51" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="memory__management_8c_1af72f6fb9c867ee59c91532a9022e322e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void memory_pool_free</definition>
        <argsstring>(memory_pool_t *pool, void *ptr)</argsstring>
        <name>memory_pool_free</name>
        <param>
          <type>memory_pool_t *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Sets the given data pointer to not active in the given memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para>But first checks if the pointer is contained in the memory pool. If needed it will defragment the memory pool and merge free blocks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>the pool to free memory from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer to the memory to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/memory/memory_management.c" line="94" column="6" bodyfile="src/memory/memory_management.c" bodystart="94" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="memory__management_8c_1af069c92ca841b902a6be278fc9434d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shutdown_memory_pool</definition>
        <argsstring>(memory_pool_t *pool)</argsstring>
        <name>shutdown_memory_pool</name>
        <param>
          <type>memory_pool_t *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Frees the allocated memory pool. </para>
        </briefdescription>
        <detaileddescription>
<para>This function releases all resources associated with the memory pool, including the memory used for the pool itself and any allocated blocks.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/memory/memory_management.c" line="120" column="6" bodyfile="src/memory/memory_management.c" bodystart="120" bodyend="129"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Implements memory management functionality. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;memory_management.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">../logging/logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="memory__management_8c_1ac6d6edf6b3dc470f7e809e5f82b21658" refkind="member"><highlight class="normal">memory_pool_t*<sp/><ref refid="memory__management_8c_1ac6d6edf6b3dc470f7e809e5f82b21658" kindref="member">init_memory_pool</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;<sp/>MIN_MEMORY_POOL_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>size<sp/>to<sp/>the<sp/>minimum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>MIN_MEMORY_POOL_SIZE;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_pool_t*<sp/>pool<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(memory_pool_t));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pool)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>pool<sp/>base<sp/>structure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>pool-&gt;memory<sp/>=<sp/>malloc(size);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pool-&gt;memory)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>the<sp/>pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(pool);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>pool-&gt;pool_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>pool-&gt;first<sp/>=<sp/>(memory_block_t*)<sp/>pool-&gt;memory;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>pool-&gt;first-&gt;size<sp/>=<sp/>size<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(memory_block_t);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>pool-&gt;first-&gt;active<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>mark<sp/>the<sp/>block<sp/>as<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>pool-&gt;first-&gt;next<sp/>=<sp/>NULL;</highlight><highlight class="comment">//<sp/>no<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pool;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="memory__management_8c_1ad9c929376b0501e9ad79f3a293fe8a71" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="memory__management_8c_1ad9c929376b0501e9ad79f3a293fe8a71" kindref="member">memory_pool_alloc</ref>(memory_pool_t*<sp/>pool,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_block_t*<sp/>current<sp/>=<sp/>pool-&gt;first;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!current-&gt;active<sp/>&amp;&amp;<sp/>current-&gt;size<sp/>&gt;=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>found<sp/>a<sp/>free<sp/>block<sp/>that<sp/>is<sp/>large<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>remaining<sp/>=<sp/>current-&gt;size<sp/>-<sp/>size;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remaining<sp/>&gt;<sp/>MIN_MEMORY_BLOCK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remaining<sp/>is<sp/>large<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>block<sp/>for<sp/>the<sp/>remaining<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_block_t*<sp/>new_block<sp/>=<sp/>(memory_block_t*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>current<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(memory_block_t)<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_block-&gt;size<sp/>=<sp/>remaining<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(memory_block_t);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_block-&gt;active<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mark<sp/>the<sp/>new<sp/>block<sp/>as<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_block-&gt;next<sp/>=<sp/>current-&gt;next;</highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>the<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;size<sp/>=<sp/>size;</highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>size<sp/>of<sp/>the<sp/>current<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;next<sp/>=<sp/>new_block;</highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>the<sp/>new<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>more<sp/>space<sp/>left<sp/>in<sp/>the<sp/>block,<sp/>using<sp/>the<sp/>whole<sp/>block&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>remaining<sp/>memory<sp/>space<sp/>is<sp/>too<sp/>small,<sp/>so<sp/>the<sp/>current<sp/>block<sp/>will<sp/>be<sp/>used<sp/>entirely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;active<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>(current<sp/>+<sp/>1);</highlight><highlight class="comment">//<sp/>return<sp/>pointer<sp/>to<sp/>user<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;next;</highlight><highlight class="comment">//<sp/>move<sp/>to<sp/>the<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>free<sp/>block<sp/>found<sp/>for<sp/>allocation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="memory__management_8c_1af72f6fb9c867ee59c91532a9022e322e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memory__management_8c_1af72f6fb9c867ee59c91532a9022e322e" kindref="member">memory_pool_free</ref>(memory_pool_t*<sp/>pool,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Pointer<sp/>is<sp/>NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_block_t*<sp/>block<sp/>=<sp/>(memory_block_t*)<sp/>ptr<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block<sp/>&lt;<sp/>pool-&gt;first<sp/>||<sp/>block<sp/>&gt;=<sp/>(memory_block_t*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>pool-&gt;first<sp/>+<sp/>pool-&gt;pool_size))<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Pointer<sp/>is<sp/>not<sp/>in<sp/>the<sp/>memory<sp/>pool&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>block-&gt;active<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>needed,<sp/>defragmentation<sp/>of<sp/>the<sp/>memory<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_block_t*<sp/>current<sp/>=<sp/>pool-&gt;first;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(current<sp/>&amp;&amp;<sp/>current-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!current-&gt;active<sp/>&amp;&amp;<sp/>!current-&gt;next-&gt;active)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merge<sp/>with<sp/>the<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;size<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(memory_block_t)<sp/>+<sp/>current-&gt;next-&gt;size;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current-&gt;next<sp/>=<sp/>current-&gt;next-&gt;next;</highlight><highlight class="comment">//<sp/>link<sp/>to<sp/>the<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;next;</highlight><highlight class="comment">//<sp/>move<sp/>to<sp/>the<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="memory__management_8c_1af069c92ca841b902a6be278fc9434d96" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memory__management_8c_1af069c92ca841b902a6be278fc9434d96" kindref="member">shutdown_memory_pool</ref>(memory_pool_t*<sp/>pool)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pool)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Pool<sp/>is<sp/>NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>free(pool-&gt;memory);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>free(pool);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/memory/memory_management.c"/>
  </compounddef>
</doxygen>
