<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="draw__light_8c" kind="file" language="C++">
    <compoundname>draw_light.c</compoundname>
    <includes refid="draw__light_8h" local="yes">draw_light.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="4">
        <label>../common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>logging/logger.h</label>
        <link refid="logger_8h"/>
      </node>
      <node id="1">
        <label>src/map/draw/draw_light.c</label>
        <link refid="draw__light_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>draw_light.h</label>
        <link refid="draw__light_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../map.h</label>
        <link refid="map_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>memory/memory_management.h</label>
        <link refid="memory__management_8h_source"/>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="draw__light_8c_1ab67d8537d7cbc661256b3ff8bf69b9ad" prot="public" static="no" mutable="no">
        <type>map_tile_t *</type>
        <definition>map_tile_t* map_arr</definition>
        <argsstring></argsstring>
        <name>map_arr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="9" column="12" bodyfile="src/map/draw/draw_light.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="draw__light_8c_1a66a2c20c290617dc6408a95e1c7add10" prot="public" static="no" mutable="no">
        <type>map_tile_t *</type>
        <definition>map_tile_t* revealed_map_arr</definition>
        <argsstring></argsstring>
        <name>revealed_map_arr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="10" column="12" bodyfile="src/map/draw/draw_light.c" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="draw__light_8c_1adb9f19ae581e429692315003a3550795" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int map_height</definition>
        <argsstring></argsstring>
        <name>map_height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="11" column="5" bodyfile="src/map/draw/draw_light.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="draw__light_8c_1ab374b68f7eae0e484bfe3d84115f8301" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int map_width</definition>
        <argsstring></argsstring>
        <name>map_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="12" column="5" bodyfile="src/map/draw/draw_light.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="draw__light_8c_1adc3328862eb47d99af8729a4f0255349" prot="public" static="no" mutable="no">
        <type><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
        <definition>vector2d_t player_position</definition>
        <argsstring></argsstring>
        <name>player_position</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="13" column="12" bodyfile="src/map/draw/draw_light.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="draw__light_8c_1a395279899207ce7f17adf9fdb8ee97ee" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int radius</definition>
        <argsstring></argsstring>
        <name>radius</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="14" column="5" bodyfile="src/map/draw/draw_light.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="draw__light_8c_1a92513834932dbf609e213e73d39c7cf5" prot="public" static="no" mutable="no">
        <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
        <definition>const vector2d_t checks_vector[4][2]</definition>
        <argsstring>[4][2]</argsstring>
        <name>checks_vector</name>
        <initializer>= {
        {{1, 1}, {1, 0}},   
        {{-1, -1}, {-1, 0}},
        {{1, -1}, {0, -1}}, 
        {{-1, 1}, {0, 1}},  
}</initializer>
        <briefdescription>
<para>Each array row corresponds to the vector in the directions array. </para>
        </briefdescription>
        <detaileddescription>
<para>A row contains:<itemizedlist>
<listitem><para>the diagonal check vector</para>
</listitem><listitem><para>the reverse check vector </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="22" column="18" bodyfile="src/map/draw/draw_light.c" bodystart="22" bodyend="27"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="draw__light_8c_1a48bc83959eaf8a4c2ed4fe3ca7b85a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int need_loop_break</definition>
        <argsstring>(const int x, const int y, const vector2d_t dir, int j, int *prev_wall_at)</argsstring>
        <name>need_loop_break</name>
        <param>
          <type>const int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>prev_wall_at</declname>
        </param>
        <briefdescription>
<para>This is a helper function to check if the loop needs to break with this specific edge case. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>current tile x-coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>current tile y-coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>loop counter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_wall_at</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to variable, which should be written </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if loops must break, 0 when not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="39" column="5" bodyfile="src/map/draw/draw_light.c" bodystart="39" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="draw__light_8c_1a552aa4663af1f8d0995e64c4b9f70759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int process_tile</definition>
        <argsstring>(int x, int y, int *prev_wall_at, const vector2d_t dir, int j)</argsstring>
        <name>process_tile</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>prev_wall_at</declname>
        </param>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>This function processes the tile at the given coordinates and updates the revealed_map_arr array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>current tile x-coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>current tile y-coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_wall_at</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the previous wall tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>loop counter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="63" column="5" bodyfile="src/map/draw/draw_light.c" bodystart="63" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="draw__light_8c_1ae3927f4475e220bef60e0f1d4399de2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int check_and_process_tile</definition>
        <argsstring>(int x, int y, int *prev_wall_at, const vector2d_t dir, int j, const vector2d_t diagonal_check, const vector2d_t reverse_check)</argsstring>
        <name>check_and_process_tile</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>prev_wall_at</declname>
        </param>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>diagonal_check</declname>
        </param>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>reverse_check</declname>
        </param>
        <briefdescription>
<para>This function checks if the tile at the given coordinates is valid and processes it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>current tile x-coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>current tile y-coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_wall_at</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the previous wall tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction to check </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>loop counter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonal_check</parametername>
</parameternamelist>
<parameterdescription>
<para>the diagonal check vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse_check</parametername>
</parameternamelist>
<parameterdescription>
<para>the reverse check vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if loops must break, 0 when not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="88" column="5" bodyfile="src/map/draw/draw_light.c" bodystart="88" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="draw__light_8c_1ad6e66101bbda342221669cfc3916aa83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void process_light_in_direction</definition>
        <argsstring>(const vector2d_t player, const vector2d_t dir, const vector2d_t diagonal_check, const vector2d_t reverse_check, const int light_radius)</argsstring>
        <name>process_light_in_direction</name>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>player</declname>
        </param>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>diagonal_check</declname>
        </param>
        <param>
          <type>const <ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>reverse_check</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>light_radius</declname>
        </param>
        <briefdescription>
<para>Processes light in a specific direction and updates the revealed map_arr. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>the player&apos;s position on the map_arr </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>diagonal_check</parametername>
</parameternamelist>
<parameterdescription>
<para>the diagonal check vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse_check</parametername>
</parameternamelist>
<parameterdescription>
<para>the reverse check vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>light_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the light around the player </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="126" column="6" bodyfile="src/map/draw/draw_light.c" bodystart="126" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="draw__light_8c_1af2515692e104a3aace73431f1281f1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_light_on_player</definition>
        <argsstring>(map_tile_t *arr1, map_tile_t *arr2, int height, int width, vector2d_t player, const int light_radius)</argsstring>
        <name>draw_light_on_player</name>
        <param>
          <type>map_tile_t *</type>
          <declname>arr1</declname>
        </param>
        <param>
          <type>map_tile_t *</type>
          <declname>arr2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref></type>
          <declname>player</declname>
        </param>
        <param>
          <type>int</type>
          <declname>light_radius</declname>
        </param>
        <briefdescription>
<para>Draws light around the player. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arr1</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the 2D array containing all the map tiles (no Hidden tiles) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arr2</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the 2D array to reveal the arr1, based on the player&apos;s position and light radius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>The height of the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>The width of the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>player</parametername>
</parameternamelist>
<parameterdescription>
<para>The player&apos;s position on the map </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>light_radius</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the light around the player </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/map/draw/draw_light.c" line="156" column="6" bodyfile="src/map/draw/draw_light.c" bodystart="156" bodyend="177"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Implements functionality fro drawing light on player. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="draw__light_8h" kindref="compound">draw_light.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">map_tile_t*<sp/>map_arr;</highlight></codeline>
<codeline lineno="10"><highlight class="normal">map_tile_t*<sp/>revealed_map_arr;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>map_height;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>map_width;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>player_position;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>radius;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="draw__light_8c_1a92513834932dbf609e213e73d39c7cf5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/><ref refid="draw__light_8c_1a92513834932dbf609e213e73d39c7cf5" kindref="member">checks_vector</ref>[4][2]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{1,<sp/>1},<sp/>{1,<sp/>0}},<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>up</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{-1,<sp/>-1},<sp/>{-1,<sp/>0}},</highlight><highlight class="comment">//<sp/>for<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{1,<sp/>-1},<sp/>{0,<sp/>-1}},<sp/></highlight><highlight class="comment">//<sp/>for<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{{-1,<sp/>1},<sp/>{0,<sp/>1}},<sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="draw__light_8c_1a48bc83959eaf8a4c2ed4fe3ca7b85a8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="draw__light_8c_1a48bc83959eaf8a4c2ed4fe3ca7b85a8a" kindref="member">need_loop_break</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>prev_wall_at)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gets<sp/>the<sp/>x<sp/>or<sp/>y<sp/>value<sp/>of<sp/>the<sp/>calculated<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*prev_wall_at<sp/>=<sp/>abs(y<sp/>*<sp/>dir.dy<sp/>+<sp/>x<sp/>*<sp/>dir.dx);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*prev_wall_at<sp/>==<sp/>abs(y<sp/>*<sp/>dir.dy<sp/>+<sp/>x<sp/>*<sp/>dir.dx))<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>previous<sp/>j-loop<sp/>had<sp/>a<sp/>wall<sp/>at<sp/>x<sp/>or<sp/>y<sp/>coordinate,<sp/>the<sp/>loop<sp/>must<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//or<sp/>else<sp/>diagonals<sp/>tiles<sp/>(behind<sp/>a<sp/>wall<sp/>and<sp/>not<sp/>visible<sp/>by<sp/>the<sp/>player)<sp/>are<sp/>revealed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="draw__light_8c_1a552aa4663af1f8d0995e64c4b9f70759" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="draw__light_8c_1a552aa4663af1f8d0995e64c4b9f70759" kindref="member">process_tile</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>prev_wall_at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>break_loop<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculated<sp/>access<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>access_idx<sp/>=<sp/>x<sp/>*<sp/>map_height<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>revealed_map_arr[access_idx]<sp/>=<sp/>map_arr[access_idx];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map_arr[access_idx]<sp/>==<sp/>WALL)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break_loop<sp/>=<sp/><ref refid="draw__light_8c_1a48bc83959eaf8a4c2ed4fe3ca7b85a8a" kindref="member">need_loop_break</ref>(x,<sp/>y,<sp/>dir,<sp/>j,<sp/>prev_wall_at);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>break_loop;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="draw__light_8c_1ae3927f4475e220bef60e0f1d4399de2e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="draw__light_8c_1ae3927f4475e220bef60e0f1d4399de2e" kindref="member">check_and_process_tile</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>prev_wall_at,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>dir,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>diagonal_check,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>reverse_check)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculated<sp/>access<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>access_idx<sp/>=<sp/>x<sp/>*<sp/>map_height<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0<sp/>||<sp/>x<sp/>&gt;=<sp/>map_width<sp/>||<sp/>y<sp/>&lt;<sp/>0<sp/>||<sp/>y<sp/>&gt;=<sp/>map_height)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//calculated<sp/>x<sp/>or<sp/>y<sp/>is<sp/>out<sp/>of<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quit<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(revealed_map_arr[access_idx]<sp/>==<sp/>HIDDEN)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//initialize<sp/>the<sp/>relative<sp/>diagonal<sp/>and<sp/>reverse<sp/>tiles<sp/>based<sp/>on<sp/>the<sp/>y<sp/>and<sp/>x<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rel_diagonal<sp/>=<sp/>map_arr[(x<sp/>+<sp/>diagonal_check.dx)<sp/>*<sp/>map_height<sp/>+<sp/>y<sp/>+<sp/>diagonal_check.dy];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rel_reverse<sp/>=<sp/>map_arr[(x<sp/>+<sp/>reverse_check.dx)<sp/>*<sp/>map_height<sp/>+<sp/>y<sp/>+<sp/>reverse_check.dy];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rel_diagonal<sp/>==<sp/>WALL<sp/>&amp;&amp;<sp/>rel_reverse<sp/>==<sp/>WALL<sp/>&amp;&amp;<sp/>j<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>diagonal<sp/>and<sp/>reverse<sp/>tiles<sp/>are<sp/>walls<sp/>and<sp/>the<sp/>distance<sp/>from<sp/>the<sp/>player<sp/>is<sp/>greater<sp/>than<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>the<sp/>tile<sp/>must<sp/>be<sp/>hidden<sp/>because<sp/>reverse<sp/>tile<sp/>is<sp/>blocking<sp/>the<sp/>view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quit<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quit<sp/>=<sp/><ref refid="draw__light_8c_1a552aa4663af1f8d0995e64c4b9f70759" kindref="member">process_tile</ref>(x,<sp/>y,<sp/>prev_wall_at,<sp/>dir,<sp/>j);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(revealed_map_arr[access_idx]<sp/>==<sp/>WALL<sp/>&amp;&amp;<sp/><ref refid="draw__light_8c_1a48bc83959eaf8a4c2ed4fe3ca7b85a8a" kindref="member">need_loop_break</ref>(x,<sp/>y,<sp/>dir,<sp/>j,<sp/>prev_wall_at))<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quit<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>quit;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="draw__light_8c_1ad6e66101bbda342221669cfc3916aa83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="draw__light_8c_1ad6e66101bbda342221669cfc3916aa83" kindref="member">process_light_in_direction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>player,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>diagonal_check,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>reverse_check,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>light_radius)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>correction<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev_wall_at<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;=<sp/>light_radius;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_x<sp/>=<sp/>player.dx<sp/>+<sp/>j<sp/>*<sp/>dir.dy;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_y<sp/>=<sp/>player.dy<sp/>+<sp/>j<sp/>*<sp/>dir.dx;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dir.dx<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>direction<sp/>is<sp/>vertical<sp/>negate<sp/>the<sp/>subtrahend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_y<sp/>=<sp/>player.dy<sp/>-<sp/>j<sp/>*<sp/>dir.dx;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_x<sp/>&lt;<sp/>0<sp/>||<sp/>start_x<sp/>&gt;=<sp/>map_width<sp/>||<sp/>start_y<sp/>&lt;<sp/>0<sp/>||<sp/>start_y<sp/>&gt;=<sp/>map_height)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start<sp/>position<sp/>is<sp/>out<sp/>of<sp/>bounds,<sp/>skip<sp/>to<sp/>the<sp/>next<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;=<sp/>light_radius<sp/>-<sp/>correction;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>start_x<sp/>+<sp/>k<sp/>*<sp/>dir.dx;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>start_y<sp/>+<sp/>k<sp/>*<sp/>dir.dy;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="draw__light_8c_1ae3927f4475e220bef60e0f1d4399de2e" kindref="member">check_and_process_tile</ref>(x,<sp/>y,<sp/>&amp;prev_wall_at,<sp/>dir,<sp/>j,<sp/>diagonal_check,<sp/>reverse_check))<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correction++;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="draw__light_8c_1af2515692e104a3aace73431f1281f1a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="draw__light_8c_1af2515692e104a3aace73431f1281f1a9" kindref="member">draw_light_on_player</ref>(map_tile_t*<sp/>arr1,<sp/>map_tile_t*<sp/>arr2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>player,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>light_radius)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>map_arr<sp/>=<sp/>arr1;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>revealed_map_arr<sp/>=<sp/>arr2;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>map_height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>map_width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>player_position<sp/>=<sp/>player;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>radius<sp/>=<sp/>light_radius;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(light_radius<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//light<sp/>radius<sp/>is<sp/>negative<sp/>or<sp/>0,<sp/>do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>dir<sp/>=<sp/>directions[i];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>diagonal_check<sp/>=<sp/><ref refid="draw__light_8c_1a92513834932dbf609e213e73d39c7cf5" kindref="member">checks_vector</ref>[i][0];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvector2d__t" kindref="compound">vector2d_t</ref><sp/>reverse_check<sp/>=<sp/><ref refid="draw__light_8c_1a92513834932dbf609e213e73d39c7cf5" kindref="member">checks_vector</ref>[i][1];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="draw__light_8c_1ad6e66101bbda342221669cfc3916aa83" kindref="member">process_light_in_direction</ref>(player,<sp/>dir,<sp/>diagonal_check,<sp/>reverse_check,<sp/>light_radius);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/map/draw/draw_light.c"/>
  </compounddef>
</doxygen>
