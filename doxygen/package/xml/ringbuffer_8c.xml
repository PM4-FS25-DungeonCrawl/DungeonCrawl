<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="ringbuffer_8c" kind="file" language="C++">
    <compoundname>ringbuffer.c</compoundname>
    <includes refid="ringbuffer_8h" local="yes">ringbuffer.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/logging/ringbuffer.c</label>
        <link refid="ringbuffer_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ringbuffer.h</label>
        <link refid="ringbuffer_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pthread.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="ringbuffer_8c_1ad4d35da4e3f53aee4bee3ed4ef6ee939" prot="public" static="no">
        <name>INIT_MUTEX</name>
        <param><defname>mutex</defname></param>
        <initializer>pthread_mutex_init(mutex, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="20" column="14" bodyfile="src/logging/ringbuffer.c" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ringbuffer_8c_1af16d75c95404e3b8af2c49723961dbcc" prot="public" static="no">
        <name>INIT_COND</name>
        <param><defname>cond</defname></param>
        <initializer>pthread_cond_init(cond, NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="21" column="13" bodyfile="src/logging/ringbuffer.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ringbuffer_8c_1acee06b78aa983e0c386113767604af10" prot="public" static="no">
        <name>MUTEX_LOCK</name>
        <param><defname>mutex</defname></param>
        <initializer>pthread_mutex_lock(mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="23" column="13" bodyfile="src/logging/ringbuffer.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ringbuffer_8c_1a28d6bd003d684d61b6e86d364d91e7a8" prot="public" static="no">
        <name>MUTEX_UNLOCK</name>
        <param><defname>mutex</defname></param>
        <initializer>pthread_mutex_unlock(mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="24" column="13" bodyfile="src/logging/ringbuffer.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ringbuffer_8c_1a1f62e8e3a0bfd3a16ad6c26b225aff3f" prot="public" static="no">
        <name>SIGNAL_COND</name>
        <param><defname>cond</defname></param>
        <initializer>pthread_cond_signal(cond)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="25" column="13" bodyfile="src/logging/ringbuffer.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ringbuffer_8c_1a39d9281b294348e000c6f8699bf3c91e" prot="public" static="no">
        <name>SIGNAL_WAIT</name>
        <param><defname>cond</defname></param>
        <param><defname>mutex</defname></param>
        <initializer>pthread_cond_wait(cond, mutex)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="26" column="13" bodyfile="src/logging/ringbuffer.c" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ringbuffer_8c_1a86f5eae634c5cf4a26e38fe79465a0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ringbuffer</definition>
        <argsstring>(ring_buffer_t *buffer)</argsstring>
        <name>init_ringbuffer</name>
        <param>
          <type><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Initialize the ringbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The ringbuffer to initialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if initialization was successfully or 1 if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="30" column="5" bodyfile="src/logging/ringbuffer.c" bodystart="30" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="ringbuffer_8c_1a243fee15b0c1aefe76876d34499e15b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ringbuffer</definition>
        <argsstring>(const ring_buffer_t *buffer)</argsstring>
        <name>free_ringbuffer</name>
        <param>
          <type>const <ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Free the passed in ringbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to be cleaned up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="61" column="6" bodyfile="src/logging/ringbuffer.c" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="ringbuffer_8c_1a6a2f7a0f9d13c92f09b8f71259f0066b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_to_ringbuffer</definition>
        <argsstring>(ring_buffer_t *buffer, const char *message)</argsstring>
        <name>write_to_ringbuffer</name>
        <param>
          <type><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Write a message to the ringbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="70" column="6" bodyfile="src/logging/ringbuffer.c" bodystart="70" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="ringbuffer_8c_1a74823d7cc8118c5f71f3d7d6a6a30491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_from_ringbuffer</definition>
        <argsstring>(ring_buffer_t *buffer, char *message)</argsstring>
        <name>read_from_ringbuffer</name>
        <param>
          <type><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Read a message from the ringbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>A char buffer to read the message into. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on successfully reading the message : </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.c" line="82" column="5" bodyfile="src/logging/ringbuffer.c" bodystart="82" bodyend="92"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ringbuffer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INIT_MUTEX(mutex)<sp/>InitializeCriticalSection(mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INIT_COND(cond)<sp/>InitializeConditionVariable(cond)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MUTEX_LOCK(mutex)<sp/>EnterCriticalSection(mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MUTEX_UNLOCK(mutex)<sp/>LeaveCriticalSection(mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SIGNAL_COND(cond)<sp/>WakeConditionVariable(cond)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SIGNAL_WAIT(cond,<sp/>mutex)<sp/>SleepConditionVariableCS(cond,<sp/>mutex,<sp/>INFINITE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INIT_MUTEX(mutex)<sp/>pthread_mutex_init(mutex,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INIT_COND(cond)<sp/>pthread_cond_init(cond,<sp/>NULL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MUTEX_LOCK(mutex)<sp/>pthread_mutex_lock(mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MUTEX_UNLOCK(mutex)<sp/>pthread_mutex_unlock(mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SIGNAL_COND(cond)<sp/>pthread_cond_signal(cond)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>SIGNAL_WAIT(cond,<sp/>mutex)<sp/>pthread_cond_wait(cond,<sp/>mutex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_ringbuffer(<ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;head<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;tail<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>pointer<sp/>array<sp/>for<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;messages<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)<sp/>malloc(BUFFER_SIZE<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buffer-&gt;messages)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate<sp/>memory<sp/>for<sp/>messages<sp/>(at<sp/>each<sp/>pointer)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BUFFER_SIZE;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;messages[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(MAX_MSG_LENGTH);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buffer-&gt;messages[i])<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>malloc<sp/>fails,<sp/>free<sp/>up<sp/>all<sp/>the<sp/>previous<sp/>allocated<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer-&gt;messages[j]);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer-&gt;messages);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_MUTEX(&amp;buffer-&gt;mutex);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_COND(&amp;buffer-&gt;cond);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_ringbuffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;messages)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>BUFFER_SIZE;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer-&gt;messages[i]);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(buffer-&gt;messages);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_to_ringbuffer(<ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>*<sp/>buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>MUTEX_LOCK(&amp;buffer-&gt;mutex);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;count<sp/>&lt;<sp/>BUFFER_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buffer-&gt;messages[buffer-&gt;tail],<sp/>MAX_MSG_LENGTH,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>message);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;tail<sp/>=<sp/>(buffer-&gt;tail<sp/>+<sp/>1)<sp/>%<sp/>BUFFER_SIZE;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer-&gt;count++;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIGNAL_COND(&amp;buffer-&gt;cond);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>MUTEX_UNLOCK(&amp;buffer-&gt;mutex);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_from_ringbuffer(<ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>MUTEX_LOCK(&amp;buffer-&gt;mutex);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(buffer-&gt;count<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIGNAL_WAIT(&amp;buffer-&gt;cond,<sp/>&amp;buffer-&gt;mutex);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(message,<sp/>MAX_MSG_LENGTH,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>buffer-&gt;messages[buffer-&gt;head]);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;head<sp/>=<sp/>(buffer-&gt;head<sp/>+<sp/>1)<sp/>%<sp/>BUFFER_SIZE;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer-&gt;count--;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>MUTEX_UNLOCK(&amp;buffer-&gt;mutex);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/logging/ringbuffer.c"/>
  </compounddef>
</doxygen>
