<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="thread__handler_8c" kind="file" language="C++">
    <compoundname>thread_handler.c</compoundname>
    <includes refid="thread__handler_8h" local="yes">thread_handler.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">pthread.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/thread/thread_handler.c</label>
        <link refid="thread__handler_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>thread_handler.h</label>
        <link refid="thread__handler_8h"/>
      </node>
      <node id="4">
        <label>pthread.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structthread__func__wrapper__t" prot="public">thread_func_wrapper_t</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="thread__handler_8c_1a540fff0fb1ad91933bfc6f44ac7a9a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * thread_wrapper</definition>
        <argsstring>(void *arg)</argsstring>
        <name>thread_wrapper</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>A wrapper function arround a thread for multi platform thread implementation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>The arguments to pass to the thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread/thread_handler.c" line="49" column="6" bodyfile="src/thread/thread_handler.c" bodystart="49" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="thread__handler_8c_1ae977c56a16e1c4409e2ed3cdb804a887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void start_simple_thread</definition>
        <argsstring>(void(*thread_func)(void))</argsstring>
        <name>start_simple_thread</name>
        <param>
          <type>void(*)(void)</type>
          <declname>thread_func</declname>
        </param>
        <briefdescription>
<para>Starts a new thread with the given function. </para>
        </briefdescription>
        <detaileddescription>
<para>The thread will be detached, so it will run independently.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_func</parametername>
</parameternamelist>
<parameterdescription>
<para>A simple function pointer to the function that will be executed in the thread. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/thread/thread_handler.c" line="56" column="6" bodyfile="src/thread/thread_handler.c" bodystart="56" bodyend="67"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The implementation of a thread handler for working with threads. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="thread__handler_8h" kindref="compound">thread_handler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="structthread__func__wrapper__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*func)(void);</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}<sp/><ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">DWORD<sp/>WINAPI<sp/><ref refid="thread__handler_8c_1a540fff0fb1ad91933bfc6f44ac7a9a51" kindref="member">thread_wrapper</ref>(LPVOID<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>*<sp/>wrapper_arg<sp/>=<sp/>(<ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>*)<sp/>arg;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>wrapper_arg-&gt;func();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>free(wrapper_arg);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="thread__handler_8c_1ae977c56a16e1c4409e2ed3cdb804a887" kindref="member">start_simple_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*thread_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>*<sp/>arg<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>));</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>arg-&gt;func<sp/>=<sp/>thread_func;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>thread<sp/>=<sp/>CreateThread(NULL,<sp/>0,<sp/><ref refid="thread__handler_8c_1a540fff0fb1ad91933bfc6f44ac7a9a51" kindref="member">thread_wrapper</ref>,<sp/>arg,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CloseHandle(thread);</highlight><highlight class="comment">//<sp/>detach<sp/>the<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(arg);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="thread__handler_8c_1a540fff0fb1ad91933bfc6f44ac7a9a51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="thread__handler_8c_1a540fff0fb1ad91933bfc6f44ac7a9a51" kindref="member">thread_wrapper</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>*<sp/>wrapper_arg<sp/>=<sp/>(<ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>*)<sp/>arg;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>wrapper_arg-&gt;func();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>free(wrapper_arg);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="thread__handler_8c_1ae977c56a16e1c4409e2ed3cdb804a887" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="thread__handler_8c_1ae977c56a16e1c4409e2ed3cdb804a887" kindref="member">start_simple_thread</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*thread_func)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_t<sp/>thread;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>*<sp/>arg<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structthread__func__wrapper__t" kindref="compound">thread_func_wrapper_t</ref>));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight><highlight class="comment">//<sp/>Fehlerbehandlung</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>arg-&gt;func<sp/>=<sp/>thread_func;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_create(&amp;thread,<sp/>NULL,<sp/><ref refid="thread__handler_8c_1a540fff0fb1ad91933bfc6f44ac7a9a51" kindref="member">thread_wrapper</ref>,<sp/>arg)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_detach(thread);</highlight><highlight class="comment">//<sp/>Detach<sp/>den<sp/>Thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(arg);</highlight><highlight class="comment">//<sp/>Fehlerbehandlung</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/thread/thread_handler.c"/>
  </compounddef>
</doxygen>
