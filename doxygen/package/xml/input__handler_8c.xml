<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="input__handler_8c" kind="file" language="C++">
    <compoundname>input_handler.c</compoundname>
    <includes refid="input__handler_8h" local="yes">input_handler.h</includes>
    <includes refid="logger_8h" local="yes">../../logging/logger.h</includes>
    <includes refid="io__handler_8h" local="yes">../io_handler.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <incdepgraph>
      <node id="7">
        <label>../common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/io/input/input_handler.c</label>
        <link refid="input__handler_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>input_handler.h</label>
        <link refid="input__handler_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>input_types.h</label>
        <link refid="input__types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>../io_handler.h</label>
        <link refid="io__handler_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>output/common/output_handler.h</label>
        <link refid="output__handler_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>output/media/media_output.h</label>
        <link refid="media__output_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>media_output_handler.h</label>
        <link refid="media__output__handler_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>../../logging/logger.h</label>
        <link refid="logger_8h"/>
      </node>
      <node id="8">
        <label>memory/memory_management.h</label>
        <link refid="memory__management_8h_source"/>
      </node>
      <node id="4">
        <label>notcurses/notcurses.h</label>
      </node>
      <node id="10">
        <label>stdbool.h</label>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>string.h</label>
      </node>
      <node id="15">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structinput__timing__t" prot="public">input_timing_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="input__handler_8c_1a6fb83f5e91e704391ff796553d5e0f46" prot="public" static="no">
        <name>CLOCK_MONOTONIC</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="16" column="13" bodyfile="src/io/input/input_handler.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="input__handler_8c_1a4aa11a29bb125ab4b502f2ddd4067807" prot="public" static="no">
        <name>KEY_EVENT</name>
        <initializer>NCTYPE_UNKNOWN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="23" column="14" bodyfile="src/io/input/input_handler.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="input__handler_8c_1a3ac29280d151a22ffd015c6988ae362c" prot="public" static="no">
        <name>KEY_DEBOUNCE_TIME_MS</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="27" column="9" bodyfile="src/io/input/input_handler.c" bodystart="27" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="input__handler_8c_1a52a3b7efa7f1e465319159cf0f916366" prot="public" static="yes" mutable="no">
        <type><ref refid="structinput__timing__t" kindref="compound">input_timing_t</ref></type>
        <definition>input_timing_t input_timing</definition>
        <argsstring></argsstring>
        <name>input_timing</name>
        <initializer>= {
        .first_key = true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="36" column="23" bodyfile="src/io/input/input_handler.c" bodystart="36" bodyend="37"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="input__handler_8c_1a2911473e4cbc0ff11169b71347be7f93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>static long get_time_diff_ms</definition>
        <argsstring>(struct timespec *start, struct timespec *end)</argsstring>
        <name>get_time_diff_ms</name>
        <param>
          <type>struct timespec *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>struct timespec *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Calculate time difference in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>Helper function that computes the difference between two timespec structures and returns the result in milliseconds.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start timestamp </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the end timestamp </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time difference in milliseconds </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="49" column="13" bodyfile="src/io/input/input_handler.c" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="input__handler_8c_1a1155f725de68988b053cf1962699b4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="input__types_8h_1ac2f78e4a482d0202ecb440c076ca7e70" kindref="member">input_t</ref></type>
        <definition>input_t translate_input</definition>
        <argsstring>(const ncinput *raw_input)</argsstring>
        <name>translate_input</name>
        <param>
          <type>const ncinput *</type>
          <declname>raw_input</declname>
        </param>
        <briefdescription>
<para>Translate a raw Notcurses input to a logical input type. </para>
        </briefdescription>
        <detaileddescription>
<para>Helper function to convert from hardware-specific to logical inputs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>raw_input</parametername>
</parameternamelist>
<parameterdescription>
<para>The raw Notcurses input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding logical input type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="62" column="9" bodyfile="src/io/input/input_handler.c" bodystart="62" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="input__handler_8c_1a2249789ea0124ec4328f7de3bec9ba78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool init_input_handler</definition>
        <argsstring>(struct notcurses *notcurses_ptr)</argsstring>
        <name>init_input_handler</name>
        <param>
          <type>struct notcurses *</type>
          <declname>nc</declname>
          <defname>notcurses_ptr</defname>
        </param>
        <briefdescription>
<para>Initialize the input handler. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up the input handling system. This function must be called before any other input functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nc</parametername>
</parameternamelist>
<parameterdescription>
<para>The Notcurses instance to use for input handling </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on success, false on failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="100" column="6" bodyfile="src/io/input/input_handler.c" bodystart="100" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="input__handler_8c_1ad828c8f98efcde189a95693343077645" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool should_process_key</definition>
        <argsstring>()</argsstring>
        <name>should_process_key</name>
        <briefdescription>
<para>Check if enough time has passed since the last key press. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements key debouncing to prevent input overflow. It checks if enough time has passed since the last key press to consider the current key press valid. This helps prevent rapid key repetition that could cause performance issues.</para>
<para><simplesect kind="return"><para>true if the key should be processed, false if it should be ignored </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="125" column="13" bodyfile="src/io/input/input_handler.c" bodystart="125" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="input__handler_8c_1a0730e0975aa5e78a98a269a46cf62181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool get_input_blocking</definition>
        <argsstring>(input_event_t *event)</argsstring>
        <name>get_input_blocking</name>
        <param>
          <type><ref refid="structinput__event__t" kindref="compound">input_event_t</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Get the next input event (blocking) </para>
        </briefdescription>
        <detaileddescription>
<para>Waits for an input event and translates it to a logical input type. This function blocks until input is received.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="structinput__event__t" kindref="compound">input_event_t</ref> structure to fill with the input event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if an event was retrieved, false on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="147" column="6" bodyfile="src/io/input/input_handler.c" bodystart="147" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="input__handler_8c_1abb5786844da2a21d971c5509f50074cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool get_input_nonblocking</definition>
        <argsstring>(input_event_t *event)</argsstring>
        <name>get_input_nonblocking</name>
        <param>
          <type><ref refid="structinput__event__t" kindref="compound">input_event_t</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Get the next input event (non-blocking) </para>
        </briefdescription>
        <detaileddescription>
<para>Checks for an input event and translates it to a logical input type. This function does not block if no input is available.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an <ref refid="structinput__event__t" kindref="compound">input_event_t</ref> structure to fill with the input event </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if an event was retrieved, false if no events are available </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="181" column="6" bodyfile="src/io/input/input_handler.c" bodystart="181" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="input__handler_8c_1ad987e650830efc5d227cc918e75736b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shutdown_input_handler</definition>
        <argsstring>(void)</argsstring>
        <name>shutdown_input_handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Shutdown the input handler. </para>
        </briefdescription>
        <detaileddescription>
<para>Cleans up resources. This function should be called when shutting down the game. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/input/input_handler.c" line="212" column="6" bodyfile="src/io/input/input_handler.c" bodystart="212" bodyend="214"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Implements functionality for handling input. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="input__handler_8h" kindref="compound">input_handler.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">../../logging/logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="io__handler_8h" kindref="compound">../io_handler.h</ref>&quot;</highlight><highlight class="comment">//<sp/>Include<sp/>io_handler.h<sp/>to<sp/>access<sp/>global<sp/>nc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CLOCK_MONOTONIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CLOCK_MONOTONIC<sp/>1</highlight><highlight class="comment">//<sp/>Fallback<sp/>for<sp/>platforms<sp/>without<sp/>CLOCK_MONOTONIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>platform-specific<sp/>key<sp/>event<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KEY_EVENT<sp/>NCTYPE_PRESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>KEY_EVENT<sp/>NCTYPE_UNKNOWN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>minimum<sp/>time<sp/>between<sp/>key<sp/>presses<sp/>(milliseconds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KEY_DEBOUNCE_TIME_MS<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Structure<sp/>to<sp/>track<sp/>input<sp/>timing<sp/>for<sp/>debouncing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="structinput__timing__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>last_key_time;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first_key;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/><ref refid="structinput__timing__t" kindref="compound">input_timing_t</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>input<sp/>timing<sp/>tracker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structinput__timing__t" kindref="compound">input_timing_t</ref><sp/>input_timing<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.first_key<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>get_time_diff_ms(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec*<sp/>start,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>timespec*<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(end-&gt;tv_sec<sp/>-<sp/>start-&gt;tv_sec)<sp/>*<sp/>1000<sp/>+</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(end-&gt;tv_nsec<sp/>-<sp/>start-&gt;tv_nsec)<sp/>/<sp/>1000000;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="input__handler_8c_1a1155f725de68988b053cf1962699b4ad" refkind="member"><highlight class="normal"><ref refid="input__types_8h_1ac2f78e4a482d0202ecb440c076ca7e70" kindref="member">input_t</ref><sp/><ref refid="input__handler_8c_1a1155f725de68988b053cf1962699b4ad" kindref="member">translate_input</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ncinput*<sp/>raw_input)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!raw_input)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_NONE;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>special<sp/>case<sp/>for<sp/>Ctrl+C<sp/>to<sp/>quit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>(raw_input-&gt;modifiers<sp/>&amp;<sp/>NCKEY_MOD_CTRL))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_QUIT;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>this<sp/>is<sp/>a<sp/>key<sp/>event<sp/>(allow<sp/>both<sp/>NCTYPE_UNKNOWN<sp/>and<sp/>NCTYPE_PRESS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;evtype<sp/>==<sp/>NCTYPE_PRESS<sp/>||<sp/>raw_input-&gt;evtype<sp/>==<sp/>NCTYPE_UNKNOWN)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Arrow<sp/>keys<sp/>for<sp/>navigation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/>NCKEY_UP)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_UP;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/>NCKEY_DOWN)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_DOWN;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/>NCKEY_LEFT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_LEFT;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/>NCKEY_RIGHT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_RIGHT;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enter<sp/>key<sp/>for<sp/>confirmation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/>NCKEY_ENTER<sp/>||<sp/>raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_CONFIRM;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cancel<sp/>key<sp/>(C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal"><sp/>||<sp/>raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_CANCEL;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Menu<sp/>key<sp/>(M)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal"><sp/>||<sp/>raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_MENU;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stats<sp/>key<sp/>(L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal"><sp/>||<sp/>raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_STATS;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inventory<sp/>key<sp/>(I)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal"><sp/>||<sp/>raw_input-&gt;id<sp/>==<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_INVENTORY;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>didn&apos;t<sp/>match<sp/>anything,<sp/>return<sp/>INPUT_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>INPUT_NONE;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="input__handler_8c_1a2249789ea0124ec4328f7de3bec9ba78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="input__handler_8c_1a2249789ea0124ec4328f7de3bec9ba78" kindref="member">init_input_handler</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>notcurses*<sp/>notcurses_ptr)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!notcurses_ptr)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;input_handler&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Null<sp/>Notcurses<sp/>instance<sp/>provided&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assign<sp/>to<sp/>the<sp/>global<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>nc<sp/>=<sp/>notcurses_ptr;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>input<sp/>timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>input_timing.first_key<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_process_key()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>current_time;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>clock_gettime(CLOCK_MONOTONIC,<sp/>&amp;current_time);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_timing.first_key)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_timing.first_key<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_timing.last_key_time<sp/>=<sp/>current_time;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>time_diff<sp/>=<sp/>get_time_diff_ms(&amp;input_timing.last_key_time,<sp/>&amp;current_time);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_diff<sp/>&lt;<sp/>KEY_DEBOUNCE_TIME_MS)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>enough<sp/>time<sp/>has<sp/>passed,<sp/>ignore<sp/>this<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>last<sp/>key<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>input_timing.last_key_time<sp/>=<sp/>current_time;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="input__handler_8c_1a0730e0975aa5e78a98a269a46cf62181" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="input__handler_8c_1a0730e0975aa5e78a98a269a46cf62181" kindref="member">get_input_blocking</ref>(<ref refid="structinput__event__t" kindref="compound">input_event_t</ref>*<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!event<sp/>||<sp/>!nc)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;input_handler&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Null<sp/>event<sp/>pointer<sp/>or<sp/>uninitialized<sp/>handler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>input<sp/>directly<sp/>using<sp/>notcurses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>ncinput<sp/>raw_input;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;raw_input,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ncinput));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>default<sp/>values<sp/>in<sp/>case<sp/>we<sp/>return<sp/>early</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type<sp/>=<sp/>INPUT_NONE;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;event-&gt;raw_input,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ncinput));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>until<sp/>we<sp/>get<sp/>a<sp/>valid<sp/>input<sp/>or<sp/>notcurses<sp/>returns<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ret<sp/>=<sp/>notcurses_get_blocking(nc,<sp/>&amp;raw_input);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error<sp/>or<sp/>no<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Debounce<sp/>-<sp/>if<sp/>we&apos;re<sp/>getting<sp/>keys<sp/>too<sp/>fast,<sp/>ignore<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!should_process_key())<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Translate<sp/>and<sp/>fill<sp/>the<sp/>event<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type<sp/>=<sp/><ref refid="input__handler_8c_1a1155f725de68988b053cf1962699b4ad" kindref="member">translate_input</ref>(&amp;raw_input);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;raw_input<sp/>=<sp/>raw_input;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="input__handler_8c_1abb5786844da2a21d971c5509f50074cc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="input__handler_8c_1abb5786844da2a21d971c5509f50074cc" kindref="member">get_input_nonblocking</ref>(<ref refid="structinput__event__t" kindref="compound">input_event_t</ref>*<sp/>event)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!event<sp/>||<sp/>!nc)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;input_handler&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Null<sp/>event<sp/>pointer<sp/>or<sp/>uninitialized<sp/>handler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>input<sp/>directly<sp/>using<sp/>notcurses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>ncinput<sp/>raw_input;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;raw_input,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ncinput));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>default<sp/>values<sp/>in<sp/>case<sp/>we<sp/>return<sp/>early</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type<sp/>=<sp/>INPUT_NONE;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;event-&gt;raw_input,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ncinput));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret<sp/>=<sp/>notcurses_get_nblock(nc,<sp/>&amp;raw_input);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>input<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Debounce<sp/>-<sp/>if<sp/>we&apos;re<sp/>getting<sp/>keys<sp/>too<sp/>fast,<sp/>ignore<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!should_process_key())<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Translate<sp/>and<sp/>fill<sp/>the<sp/>event<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;type<sp/>=<sp/><ref refid="input__handler_8c_1a1155f725de68988b053cf1962699b4ad" kindref="member">translate_input</ref>(&amp;raw_input);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal">-&gt;raw_input<sp/>=<sp/>raw_input;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="input__handler_8c_1ad987e650830efc5d227cc918e75736b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="input__handler_8c_1ad987e650830efc5d227cc918e75736b4" kindref="member">shutdown_input_handler</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>nc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/io/input/input_handler.c"/>
  </compounddef>
</doxygen>
