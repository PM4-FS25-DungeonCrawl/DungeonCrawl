<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="ringbuffer_8h" kind="file" language="C++">
    <compoundname>ringbuffer.h</compoundname>
    <includes local="no">pthread.h</includes>
    <includedby refid="logger_8c" local="yes">src/logging/logger.c</includedby>
    <includedby refid="ringbuffer_8c" local="yes">src/logging/ringbuffer.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/logging/ringbuffer.h</label>
        <link refid="ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pthread.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/logging/logger.c</label>
        <link refid="logger_8c"/>
      </node>
      <node id="3">
        <label>src/logging/ringbuffer.c</label>
        <link refid="ringbuffer_8c_source"/>
      </node>
      <node id="1">
        <label>src/logging/ringbuffer.h</label>
        <link refid="ringbuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structring__buffer__t" prot="public">ring_buffer_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="ringbuffer_8h_1a6b20d41d6252e9871430c242cb1a56e7" prot="public" static="no">
        <name>BUFFER_SIZE</name>
        <initializer>20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.h" line="9" column="9" bodyfile="src/logging/ringbuffer.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ringbuffer_8h_1aae15a57359405fa67f39ff805c6eddd4" prot="public" static="no">
        <name>MAX_MSG_LENGTH</name>
        <initializer>1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.h" line="10" column="9" bodyfile="src/logging/ringbuffer.h" bodystart="10" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ringbuffer_8h_1a86f5eae634c5cf4a26e38fe79465a0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int init_ringbuffer</definition>
        <argsstring>(ring_buffer_t *buffer)</argsstring>
        <name>init_ringbuffer</name>
        <param>
          <type><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Initialize the ringbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The ringbuffer to initialize. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if initialization was successfully or 1 if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.h" line="42" column="5" bodyfile="src/logging/ringbuffer.c" bodystart="30" bodyend="59" declfile="src/logging/ringbuffer.h" declline="42" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="ringbuffer_8h_1a243fee15b0c1aefe76876d34499e15b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ringbuffer</definition>
        <argsstring>(const ring_buffer_t *buffer)</argsstring>
        <name>free_ringbuffer</name>
        <param>
          <type>const <ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Free the passed in ringbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to be cleaned up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.h" line="48" column="6" bodyfile="src/logging/ringbuffer.c" bodystart="61" bodyend="68" declfile="src/logging/ringbuffer.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ringbuffer_8h_1a6a2f7a0f9d13c92f09b8f71259f0066b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write_to_ringbuffer</definition>
        <argsstring>(ring_buffer_t *buffer, const char *message)</argsstring>
        <name>write_to_ringbuffer</name>
        <param>
          <type><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Write a message to the ringbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The message to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.h" line="55" column="6" bodyfile="src/logging/ringbuffer.c" bodystart="70" bodyend="79" declfile="src/logging/ringbuffer.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="ringbuffer_8h_1a74823d7cc8118c5f71f3d7d6a6a30491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_from_ringbuffer</definition>
        <argsstring>(ring_buffer_t *buffer, char *message)</argsstring>
        <name>read_from_ringbuffer</name>
        <param>
          <type><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Read a message from the ringbuffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>A char buffer to read the message into. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on successfully reading the message : </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logging/ringbuffer.h" line="63" column="5" bodyfile="src/logging/ringbuffer.c" bodystart="82" bodyend="92" declfile="src/logging/ringbuffer.h" declline="63" declcolumn="5"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RINGBUFFER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RINGBUFFER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BUFFER_SIZE<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_MSG_LENGTH<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>messages;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>CRITICAL_SECTION<sp/>mutex;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>CONDITION_VARIABLE<sp/>cond;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}<sp/><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structring__buffer__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>messages;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>head;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tail;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_mutex_t<sp/>mutex;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_cond_t<sp/>cond;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_ringbuffer(<ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>*<sp/>buffer);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_ringbuffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>*<sp/>buffer);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write_to_ringbuffer(<ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>*<sp/>buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_from_ringbuffer(<ref refid="structring__buffer__t" kindref="compound">ring_buffer_t</ref>*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//RINGBUFFER_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/logging/ringbuffer.h"/>
  </compounddef>
</doxygen>
