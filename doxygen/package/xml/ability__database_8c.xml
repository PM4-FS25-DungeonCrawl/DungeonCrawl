<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="ability__database_8c" kind="file" language="C++">
    <compoundname>ability_database.c</compoundname>
    <includes refid="ability__database_8h" local="yes">ability_database.h</includes>
    <includes refid="logger_8h" local="yes">../../logging/logger.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="8">
        <label>../../include/sqlite3.h</label>
      </node>
      <node id="10">
        <label>../character/character_fw.h</label>
        <link refid="character__fw_8h"/>
      </node>
      <node id="3">
        <label>../../combat/ability.h</label>
        <link refid="ability_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ability_fw.h</label>
        <link refid="ability__fw_8h"/>
      </node>
      <node id="9">
        <label>damage.h</label>
        <link refid="damage_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>../common.h</label>
        <link refid="common_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>../database/database.h</label>
        <link refid="database_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/database/game/ability_database.c</label>
        <link refid="ability__database_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ability_database.h</label>
        <link refid="ability__database_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>logging/logger.h</label>
        <link refid="logger_8h"/>
      </node>
      <node id="6">
        <label>memory/memory_management.h</label>
        <link refid="memory__management_8h_source"/>
      </node>
      <node id="12">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="ability__database_8c_1a1ad3d891f7083f4076c11c307969bf65" prot="public" static="no">
        <name>SQL_SELECT_ALL_ABILITIES</name>
        <initializer>&quot;SELECT AB_NUMBER, AB_NAME, AB_ROLLAMOUNT, AB_ACCURACY, AB_RESSOURCECOST, AB_DICESIZE, DA_NUMBER FROM ability, damage JOIN ability_has_damage ON AD_AB_ID = AB_ID AND AD_DA_ID = DA_ID&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/database/game/ability_database.c" line="11" column="9" bodyfile="src/database/game/ability_database.c" bodystart="11" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="ability__database_8c_1a23ecf5bd4fcbb6c0c843343b1d8b02e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structability__init__t" kindref="compound">ability_init_t</ref> *</type>
        <definition>ability_init_t * get_ability_table_from_db</definition>
        <argsstring>(const db_connection_t *db_connection)</argsstring>
        <name>get_ability_table_from_db</name>
        <param>
          <type>const <ref refid="structdb__connection__t" kindref="compound">db_connection_t</ref> *</type>
          <declname>db_connection</declname>
        </param>
        <briefdescription>
<para>Get the ability table from the database. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>db_connection</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the database connection</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ability_init_t* pointer to the ability table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/database/game/ability_database.c" line="13" column="16" bodyfile="src/database/game/ability_database.c" bodystart="13" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="ability__database_8c_1ab46922c47f81556621ae64c66e58c0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_ability_table_from_db</definition>
        <argsstring>(ability_init_t *ability_init_table)</argsstring>
        <name>free_ability_table_from_db</name>
        <param>
          <type><ref refid="structability__init__t" kindref="compound">ability_init_t</ref> *</type>
          <declname>ability_init_table</declname>
        </param>
        <briefdescription>
<para>Clean up the ability table Call this function to free the memory allocated for the ability table. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/database/game/ability_database.c" line="64" column="6" bodyfile="src/database/game/ability_database.c" bodystart="64" bodyend="74"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Implements functionality for working with abilites and the database. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ability__database_8h" kindref="compound">ability_database.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">../../logging/logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SQL_SELECT_ALL_ABILITIES<sp/>&quot;SELECT<sp/>AB_NUMBER,<sp/>AB_NAME,<sp/>AB_ROLLAMOUNT,<sp/>AB_ACCURACY,<sp/>AB_RESSOURCECOST,<sp/>AB_DICESIZE,<sp/>DA_NUMBER<sp/>FROM<sp/>ability,<sp/>damage<sp/>JOIN<sp/>ability_has_damage<sp/>ON<sp/>AD_AB_ID<sp/>=<sp/>AB_ID<sp/>AND<sp/>AD_DA_ID<sp/>=<sp/>DA_ID&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="ability__database_8c_1a23ecf5bd4fcbb6c0c843343b1d8b02e6" refkind="member"><highlight class="normal"><ref refid="structability__init__t" kindref="compound">ability_init_t</ref>*<sp/><ref refid="ability__database_8c_1a23ecf5bd4fcbb6c0c843343b1d8b02e6" kindref="member">get_ability_table_from_db</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdb__connection__t" kindref="compound">db_connection_t</ref>*<sp/>db_connection)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>database<sp/>connection<sp/>is<sp/>open</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="database_8c_1a064257e61ac38087e12fb9b950289768" kindref="member">db_is_open</ref>(db_connection))<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Ability&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Database<sp/>connection<sp/>is<sp/>not<sp/>open&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>the<sp/>SQL<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>sqlite3_stmt*<sp/>stmt;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>sqlite3_prepare_v2(db_connection-&gt;db,<sp/>SQL_SELECT_ALL_ABILITIES,<sp/>-1,<sp/>&amp;stmt,<sp/>NULL);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>SQLITE_OK)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Ability&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>prepare<sp/>statement:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>sqlite3_errmsg(db_connection-&gt;db));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>memory<sp/>for<sp/>the<sp/>ability<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structability__init__t" kindref="compound">ability_init_t</ref>*<sp/>ability_init_table<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structability__init__t" kindref="compound">ability_init_t</ref>)<sp/>*<sp/>MAX_ABILITIES);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ability_init_table<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Ability&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>allocate<sp/>memory<sp/>for<sp/>ability<sp/>table&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqlite3_finalize(stmt);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(ability_init_table,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structability__init__t" kindref="compound">ability_init_t</ref>)<sp/>*<sp/>MAX_ABILITIES);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>statement<sp/>and<sp/>fetch<sp/>the<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((rc<sp/>=<sp/>sqlite3_step(stmt))<sp/>==<sp/>SQLITE_ROW<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/>MAX_ABILITIES)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ability_init_table[index].ability_number<sp/>=<sp/>sqlite3_column_int(stmt,<sp/>0);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ability_init_table[index].name<sp/>=<sp/>strdup((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>sqlite3_column_text(stmt,<sp/>1));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ability_init_table[index].roll_amount<sp/>=<sp/>sqlite3_column_int(stmt,<sp/>2);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ability_init_table[index].accuracy<sp/>=<sp/>sqlite3_column_int(stmt,<sp/>3);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ability_init_table[index].resource_cost<sp/>=<sp/>sqlite3_column_int(stmt,<sp/>4);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ability_init_table[index].dice_size<sp/>=<sp/>(dice_size_t)<sp/>sqlite3_column_int(stmt,<sp/>5);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ability_init_table[index].damage_type<sp/>=<sp/>(damage_type_t)<sp/>sqlite3_column_int(stmt,<sp/>6);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index++;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rc<sp/>!=<sp/>SQLITE_DONE)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8c_1aa70df4f70b7969a40b70fda659005550" kindref="member">log_msg</ref>(ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Ability&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>execute<sp/>statement:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>sqlite3_errmsg(db_connection-&gt;db));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ability_init_table);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqlite3_finalize(stmt);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finalize<sp/>the<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>sqlite3_finalize(stmt);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ability_init_table;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="ability__database_8c_1ab46922c47f81556621ae64c66e58c0da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="ability__database_8c_1ab46922c47f81556621ae64c66e58c0da" kindref="member">free_ability_table_from_db</ref>(<ref refid="structability__init__t" kindref="compound">ability_init_t</ref>*<sp/>ability_init_table)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ability_init_table<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MAX_ABILITIES;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ability_init_table[i].name);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ability_init_table[i].name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ability_init_table);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/database/game/ability_database.c"/>
  </compounddef>
</doxygen>
