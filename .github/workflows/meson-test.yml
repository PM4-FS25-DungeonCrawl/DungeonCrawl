name: C Project CI

on:
#  push:
#    branches:
#      - develop
#  pull_request:
#    branches:
#      - develop
  workflow_run:
    workflows: [ "Auto-format Code" ]
    types:
      - completed


jobs:
  build-and-test:
    runs-on: ubuntu-latest  # or another OS if needed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build gcc python3-pip
          pip3 install gcovr

      - name: Configure Meson with coverage flags
        run: meson setup builddir --buildtype=debug --prefix=$PWD/builddir -Db_coverage=true

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build gcc

      - name: Configure Meson
        run: meson setup builddir

      - name: Compile project
        run: ninja -C builddir

      - name: Run tests
        run: meson test -C builddir --verbose
        
      - name: Generate coverage report (text summary)
        run: |
          gcovr -r . --html --html-details -o coverage-report.html
          gcovr -r .  # simple text summary in console
          
      - name: Upload coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report.html
          
  update-coverage:
    name: Commit coverage report
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.ref == 'refs/heads/develop' && success() }}

    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Download coverage report artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report/

      - name: Get path
        run: ls -la coverage-report/


      - name: Commit coverage report to documents/coverage/
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Ensure we're on the actual branch, not detached HEAD
          git checkout ${{ github.ref_name }}

          # Prepare the documents/coverage folder
          mkdir -p documents/coverage

          # Remove only previous coverage files (preserve other docs)
          rm -f documents/coverage/coverage-report.html

          # Move the new report there
          mv coverage-report/coverage-report.html documents/coverage/coverage-report.html

          git add documents/coverage/coverage-report.html
          git commit -m "Update coverage report [skip ci]" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}
