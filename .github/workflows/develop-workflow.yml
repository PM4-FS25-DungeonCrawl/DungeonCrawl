name: Develop Workflow

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop

jobs:
  auto-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Clang-Format v19 and Clang-Tidy v18
        run: |
          sudo apt install -y clang-format-19

      - name: Format Code
        run: |
          git fetch origin ${{ github.head_ref || github.ref_name }}
          git checkout -B ${{ github.head_ref || github.ref_name }} origin/${{ github.head_ref || github.ref_name }}

          find src/ test/ -type f \( -name '*.c' -o -name '*.h' \) | xargs clang-format-19 -i

      - name: Commit Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add .
          git diff --staged --quiet || git commit -m "auto formatting: clang-fromat"
          git push origin HEAD:${{ github.head_ref || github.ref_name }}

  build-and-test:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest]  # Multi-OS build
    runs-on: ${{ matrix.os }}
    needs: auto-format

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build gcc python3-pip
          sudo apt install -y clang-tidy-18
          pip3 install gcovr

      # - name: Install Dependencies (macOS)
      #   if: runner.os == 'macOS'
      #   run: |
      #     brew install meson ninja

      - name: Configure Meson with coverage flags
        if: runner.os == 'Linux'
        run: meson setup builddir --buildtype=debug --prefix=$PWD/builddir -Db_coverage=true

      - name: Configure Meson
        if: runner.os == 'Linux' # TODO: remove this if-block when all other os are running
        run: meson setup builddir

      - name: Compile Project
        if: runner.os == 'Linux' # TODO: remove this if-block when all other os are running
        run: ninja -C builddir

      - name: Run tests on Linux
        if: runner.os == 'Linux'
        run: meson test -C builddir --verbose

      - name: Generate coverage report (text summary)
        if: runner.os == 'Linux'
        run: |
          gcovr -r . --filter src/ --html --html-details -o coverage-report.html
          gcovr -r . --filter src/ # simple text summary in console

      - name: Generate clang-tidy report
        if: runner.os == 'Linux'
        run: |
          git fetch origin ${{ github.head_ref || github.ref_name }}
          git checkout -B ${{ github.head_ref || github.ref_name }} origin/${{ github.head_ref || github.ref_name }}
          
          find src/ -name "*.c" | xargs clang-tidy -p builddir 2>&1 | grep -vE '^\[.*\] Processing file|^[0-9]+ warnings generated' > clang-tidy-fixes.txt

      - name: Upload coverage report as artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report.html

      - name: Commit clang-tidy report
        if: runner.os == 'Linux'
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add clang-tidy-fixes.txt
          git diff --staged --quiet || git commit -m "clang-tidy report"
          git push origin HEAD:${{ github.head_ref || github.ref_name }}

  update-coverage:
    name: Commit coverage report
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ github.ref == 'refs/heads/develop' && success() }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage report artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report/

      - name: Get path
        run: ls -la coverage-report/


      - name: Commit coverage report to documents/coverage/
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Ensure we're on the actual branch, not detached HEAD
          git fetch origin ${{ github.head_ref || github.ref_name }}
          git checkout -B ${{ github.head_ref || github.ref_name }} origin/${{ github.head_ref || github.ref_name }}

          # Prepare the documents/coverage folder
          mkdir -p documents/coverage

          # Remove only previous coverage files (preserve other docs)
          rm -f documents/coverage/coverage-report.html

          # Move the new report there
          mv coverage-report/coverage-report.html documents/coverage/coverage-report.html

          git add documents/coverage/coverage-report.html
          git commit -m "Update coverage report [skip ci]" || echo "No changes to commit"
          git push origin ${{ github.ref_name }}